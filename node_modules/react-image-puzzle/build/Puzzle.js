'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Cell = require('./Cell');

var _Cell2 = _interopRequireDefault(_Cell);

var _reactDnd = require('react-dnd');

var _reactDndHtml5Backend = require('react-dnd-html5-backend');

var _reactDndHtml5Backend2 = _interopRequireDefault(_reactDndHtml5Backend);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function shuffle(a) {
  var b = a.slice();

  for (var i = b.length - 1; i > 0; i--) {
    var j = Math.floor(Math.random() * (i + 1));
    var _ref = [b[j], b[i]];
    b[i] = _ref[0];
    b[j] = _ref[1];
  }

  return b;
}

var Puzzle = function (_React$Component) {
  _inherits(Puzzle, _React$Component);

  function Puzzle(props) {
    _classCallCheck(this, Puzzle);

    var _this = _possibleConstructorReturn(this, (Puzzle.__proto__ || Object.getPrototypeOf(Puzzle)).call(this, props));

    var rows = props.rows;

    var cells = rows * rows;

    _this.state = { positions: [].concat(_toConsumableArray(Array(cells).keys())) };
    return _this;
  }

  _createClass(Puzzle, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var positions = this.state.positions;


      this.setState({ positions: shuffle(positions) });
    }
  }, {
    key: 'onSwap',
    value: function onSwap(sourcePosition, dropPosition) {
      var oldPositions = this.state.positions.slice();
      var newPositions = [];
      var done = true;
      var p = 0;

      for (var i in oldPositions) {
        var value = oldPositions[i];
        var newValue = value;

        if (value === sourcePosition) {
          newValue = dropPosition;
        } else if (value === dropPosition) {
          newValue = sourcePosition;
        }

        newPositions.push(newValue);

        if (newValue !== p) {
          done = false;
        }

        p = p + 1;
      }

      this.setState({ positions: newPositions });

      if (done) {
        this.props.onDone();
      }
    }
  }, {
    key: 'renderSquares',
    value: function renderSquares() {
      var _this2 = this;

      var _props = this.props,
          image = _props.image,
          size = _props.size,
          rows = _props.rows;
      var positions = this.state.positions;


      var squares = positions.map(function (i) {
        return _react2.default.createElement(_Cell2.default, {
          key: i,
          size: size,
          image: image,
          rows: rows,
          position: i,
          onSwap: _this2.onSwap.bind(_this2)
        });
      });

      return squares;
    }
  }, {
    key: 'render',
    value: function render() {
      var size = this.props.size;


      return _react2.default.createElement(
        'div',
        {
          style: {
            display: 'flex',
            flexWrap: 'wrap',
            padding: 0,
            width: size + 'px',
            height: size + 'px'
          } },
        this.renderSquares()
      );
    }
  }]);

  return Puzzle;
}(_react2.default.Component);

;

exports.default = (0, _reactDnd.DragDropContext)(_reactDndHtml5Backend2.default)(Puzzle);